<?xml version="1.0" encoding="utf-8"?>
<openerp><data noupdate="0">

    <!-- =========== -->
    <!-- res.partner -->
    <!-- =========== -->

    <!-- Server Action to run set_bpk() for res.partner -->
    <record id="server_action_set_bpk" model="ir.actions.server" forcecreate="1">
        <field name="name">Force BPK-Request</field>
        <field name="model_id" ref="model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
            <![CDATA[
            if context.get('active_model') == 'res.partner':

                # Find ids
                ids = []
                if context.get('active_domain'):
                    ids = self.search(cr, uid, context['active_domain'], context=context)
                elif context.get('active_ids'):
                    ids = context['active_ids']


                # Call button action action_set_bpk
                if ids:
                    assert len(ids) <= 2000, _("Max 2000 partner at once are allowed for manually started set_bpk()! Please use Schedule BPK-Request instead!")
                    self.action_set_bpk(cr, uid, ids, force_request=True, context=context)
            ]]>
        </field>
    </record>
    <!-- Add to more menu -->
    <record id="ir_server_action_set_bpk" model="ir.values" forcecreate="1">
        <field name="key2" eval="'client_action_multi'"/>
        <field name="model" eval="'res.partner'"/>
        <field name="name">Force BPK-Request</field>
        <field name="value" eval="'ir.actions.server,%d'%server_action_set_bpk"/>
    </record>


    <!-- ============================ -->
    <!-- BPK RECORDS: res.partner.bpk -->
    <!-- ============================ -->

    <!-- Server Action to run set_bpk() for res.partner.bpk -->
    <record id="server_action_set_bpk_for_bpkrecords" model="ir.actions.server" forcecreate="1">
        <field name="name">Force BPK Request</field>
        <field name="model_id" ref="model_res_partner_bpk"/>
        <field name="state">code</field>
        <field name="code">
            <![CDATA[
            if context.get('active_model') == 'res.partner.bpk':

                # Find res.partner.bpk ids
                ids = []
                if context.get('active_domain'):
                    ids = self.search(cr, uid, context['active_domain'], context=context)
                elif context.get('active_ids'):
                    ids = context['active_ids']


                # Find res.partner ids
                bpk_requests = self.browse(cr, uid, ids, context=context)
                partner_ids = [r.bpk_request_partner_id.id for r in bpk_requests if r.bpk_request_partner_id]

                # Run set_bpk() for found partner
                if partner_ids:
                    assert len(ids) <= 2000, _("Max 2000 partner at once are allowed for manually started set_bpk()! Please use Schedule BPK-Request instead!")
                    partner_obj = self.pool['res.partner']
                    partner_obj.action_set_bpk(cr, uid, partner_ids, force_request=True, context=context)
            ]]>
        </field>
    </record>
    <!-- Add to more menu -->
    <record id="ir_server_action_set_bpk_for_bpkrecords" model="ir.values" forcecreate="1">
        <field name="key2" eval="'client_action_multi'"/>
        <field name="model" eval="'res.partner.bpk'"/>
        <field name="name">Force BPK Request</field>
        <field name="value" eval="'ir.actions.server,%d'%server_action_set_bpk_for_bpkrecords"/>
    </record>

    <!-- ==================================================== -->
    <!-- DONATION REPORT RECORDS: res.partner.donation_report -->
    <!-- ==================================================== -->

    <!-- Server Action to run update_state_and_submission_information() for res.partner.donation_report -->
    <record id="server_action_update_state_and_submission_information" model="ir.actions.server" forcecreate="1">
        <field name="name">Update state and subm. vals</field>
        <field name="model_id" ref="model_res_partner_donation_report"/>
        <field name="state">code</field>
        <field name="code">
            <![CDATA[
            if context.get('active_model') == 'res.partner.donation_report':

                ids = []
                active_domain = context.get('active_domain', '')
                active_ids = context.get('active_ids', '')

                # If there is a search domain but less than 80 (one view) of records are selected it is highly
                # likely that the user selected only some records and therefore only wants the action to be
                # executed on those records instead on all records of the domain
                if (active_ids and not active_domain) or (active_ids and active_domain and len(active_ids) < 80):
                    ids = active_ids
                elif active_domain:
                    ids = self.search(cr, uid, active_domain, context=context)

                # Run server_action_update_state_and_submission_information() for found donation reports
                if ids:
                    self.update_state_and_submission_information(cr, uid, ids, context=context)
            ]]>
        </field>
    </record>
    <!-- Add to more menu -->
    <record id="ir_server_action_update_state_and_submission_information" model="ir.values" forcecreate="1">
        <field name="key2" eval="'client_action_multi'"/>
        <field name="model" eval="'res.partner.donation_report'"/>
        <field name="name">Update state and subm. vals</field>
        <field name="value" eval="'ir.actions.server,%d'%server_action_update_state_and_submission_information"/>
    </record>


    <!-- =============================================================== -->
    <!-- DONATION REPORT RECORDS: res.partner.donation_report.submission -->
    <!-- =============================================================== -->
    <!-- Server Action to run process_response_file() for res.partner.donation_report.submission -->
    <record id="server_action_process_response_file" model="ir.actions.server" forcecreate="1">
        <field name="name">(Re-)Process DataBox Response File!</field>
        <field name="model_id" ref="model_res_partner_donation_report_submission"/>
        <field name="state">code</field>
        <field name="code">
            <![CDATA[
            if context.get('active_model') == 'res.partner.donation_report.submission':

                active_ids = context.get('active_ids', '')

                if len(active_ids) == 1:
                    self.process_response_file(cr, uid, active_ids, context=context)

            ]]>
        </field>
    </record>
    <!-- Add to more menu -->
    <record id="ir_server_action_process_response_file" model="ir.values" forcecreate="1">
        <field name="key2" eval="'client_action_multi'"/>
        <field name="model" eval="'res.partner.donation_report.submission'"/>
        <field name="name">(Re-)Process DataBox Response File!</field>
        <field name="value" eval="'ir.actions.server,%d'%server_action_process_response_file"/>
    </record>

</data></openerp>

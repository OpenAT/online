<?xml version="1.0" encoding="utf-8"?>
<openerp><data>

    <!-- =============================== -->
    <!-- CREATE SOSYNC JOB QUEUE ACTIONS -->
    <!-- =============================== -->

    <!-- Server Action to manually submit a sync jobs -->
    <record id="submit_sync_job" model="ir.actions.server">
        <field name="name">Submit Sync Job</field>
        <field name="model_id" ref="model_sosync_job_queue"/>
        <field name="state">code</field>
        <field name="code">
            if context.get('active_model') == 'sosync.job.queue':
                ids = []
                if context.get('active_domain'):
                    ids = self.search(cr, uid, context['active_domain'], context=context)
                elif context.get('active_ids'):
                    ids = context['active_ids']

                # Submit the sync job(s)
                self.submit_sync_job(cr, uid, ids, context=context)
        </field>
    </record>
    <!-- Add Server Action submit_sync_job to the More menu -->
    <record id="ir_submit_sync_job" model="ir.values">
        <field name="key2" eval="'client_action_multi'"/>
        <field name="model" eval="'sosync.job.queue'"/>
        <field name="name">Submit Sync Job</field>
        <field name="value" eval="'ir.actions.server,%d'%submit_sync_job"/>
    </record>

    <!-- ========================= -->
    <!-- CREATE SOSYNC JOB ACTIONS -->
    <!-- ========================= -->

    <!-- Server Action to copy sync jobs to the submission queue -->
<!--    <record id="copy_sync_job_to_queue" model="ir.actions.server">-->
<!--        <field name="name">Copy Sync Job to Queue</field>-->
<!--        <field name="model_id" ref="model_sosync_job"/>-->
<!--        <field name="state">code</field>-->
<!--        <field name="code">-->
<!--            <![CDATA[-->
<!--            if context.get('active_model') == 'sosync.job':-->
<!--                ids = []-->
<!--                active_domain = context.get('active_domain', '')-->
<!--                active_ids = context.get('active_ids', '')-->

<!--                # If there is a search domain but less than 80 (one view) of records are selected it is highly-->
<!--                # likely that the user selected only some records and therefore only wants the action to be-->
<!--                # executed on those records instead on all records of the domain-->
<!--                if (active_ids and not active_domain) or (active_ids and active_domain and len(active_ids) < 80):-->
<!--                    ids = active_ids-->
<!--                elif active_domain:-->
<!--                    ids = self.search(cr, uid, active_domain, context=context)-->

<!--                # Copy the sync jobs to the queue-->
<!--                if ids:-->
<!--                    # ATTENTION: Always fill ALL interface options in server actions or the mapping from old-->
<!--                    #            to new api will fail-->
<!--                    self.copy_sync_job_to_queue(cr, uid, ids, context=context)-->
<!--            ]]>-->
<!--        </field>-->
<!--    </record>-->
    <!-- Add Server Action to the More menu -->
<!--    <record id="ir_copy_sync_job_to_queue" model="ir.values">-->
<!--        <field name="key2" eval="'client_action_multi'"/>-->
<!--        <field name="model" eval="'sosync.job'"/>-->
<!--        <field name="name">Copy Jobs to Submission Queue</field>-->
<!--        <field name="value" eval="'ir.actions.server,%d'%copy_sync_job_to_queue"/>-->
<!--    </record>-->

    <!-- ================================= -->
    <!-- CREATE SYNC JOB ACTIONS PER MODEL -->
    <!-- ================================= -->

    <!-- Server Action to run create_sync_job res.partner -->
    <record id="create_sync_job" model="ir.actions.server">
        <field name="name">Create Sync Job</field>
        <field name="model_id" ref="model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
            if context.get('active_model') == 'res.partner':
                ids = []
                if context.get('active_domain'):
                    ids = self.search(cr, uid, context['active_domain'], context=context)
                elif context.get('active_ids'):
                    ids = context['active_ids']

                # Create the sync job(s)
                self.create_sync_job(cr, uid, ids, context=context)
        </field>
    </record>
    <!-- Add Server Action create_sync_job res.partner to the More menu -->
    <record id="ir_create_sync_job" model="ir.values">
        <field name="key2" eval="'client_action_multi'"/>
        <field name="model" eval="'res.partner'"/>
        <field name="name">Create Sync Job</field>
        <field name="value" eval="'ir.actions.server,%d'%create_sync_job"/>
    </record>


    <!-- Server Action to run create_sync_job res.partner.bpk -->
    <record id="create_sync_job_res_partner_bpk" model="ir.actions.server">
        <field name="name">Create Sync Job</field>
        <field name="model_id" ref="model_res_partner_bpk"/>
        <field name="state">code</field>
        <field name="code">
            if context.get('active_model') == 'res.partner.bpk':
                ids = []
                if context.get('active_domain'):
                    ids = self.search(cr, uid, context['active_domain'], context=context)
                elif context.get('active_ids'):
                    ids = context['active_ids']

                # Create the sync job(s)
                self.create_sync_job(cr, uid, ids, context=context)
        </field>
    </record>
    <!-- Add Server Action create_sync_job res.partner.bpk to the More menu -->
    <record id="ir_create_sync_job_res_partner_bpk" model="ir.values">
        <field name="key2" eval="'client_action_multi'"/>
        <field name="model" eval="'res.partner.bpk'"/>
        <field name="name">Create Sync Job</field>
        <field name="value" eval="'ir.actions.server,%d'%create_sync_job_res_partner_bpk"/>
    </record>


</data></openerp>

{"swagger": "2.0", "info": {"version": "2021-01-21 13:52:24", "contact": {"url": "/api/v1/frst/sphinx_doc", "name": "API Support", "email": "mike@test.com"}, "description": "# Fundrasing Studio REST-API", "title": "frst"}, "host": "demo.local.com", "basePath": "/api/v1/frst", "schemes": ["http"], "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "produces": ["application/json"], "paths": {"/res.partner": {"post": {"responses": {"201": {"description": "successful create", "schema": {"$ref": "#/definitions/res.partner-read_one"}}, "400": {"$ref": "#/responses/400"}, "500": {"$ref": "#/responses/500"}, "401": {"$ref": "#/responses/401"}}, "parameters": [{"schema": {"$ref": "#/definitions/res.partner"}, "description": "res.partner object that needs to be added to the store", "required": true, "name": "body", "in": "body"}], "tags": ["res.partner"], "description": "", "summary": "Add a new res.partner object to the store", "consumes": ["application/json"], "operationId": "addResPartner"}, "get": {"responses": {"400": {"$ref": "#/responses/400"}, "200": {"description": "A list of res.partner.", "schema": {"items": {"$ref": "#/definitions/res.partner-read_many"}, "type": "array"}}, "500": {"$ref": "#/responses/500"}, "401": {"$ref": "#/responses/401"}}, "produces": ["application/json"], "description": "Returns all res.partner objects", "summary": "Get all res.partner objects", "tags": ["res.partner"], "operationId": "getAllResPartner"}}, "/res.partner/{id}/call/{method_name}": {"patch": {"responses": {"200": {"description": "successful patch"}, "400": {"$ref": "#/responses/400"}, "401": {"$ref": "#/responses/401"}, "403": {"description": "Requested model method is not allowed", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"$ref": "#/responses/500"}}, "description": "Call model method for single record.", "parameters": [{"description": "Record ID", "format": "int64", "required": true, "in": "path", "type": "integer", "name": "id"}, {"enum": ["search"], "description": "Method Name", "required": true, "in": "path", "type": "string", "name": "method_name"}, {"description": "Parameters for calling the method on a recordset", "schema": {"$ref": "#/definitions/res.partner-patch"}, "name": "body", "in": "body"}], "produces": ["application/json"], "tags": ["res.partner"], "summary": "Patch res.partner by single ID", "consumes": ["application/json"], "operationId": "callMethodForResPartnerSingleRecord"}}, "/report/pdf/{report_external_id}/{docids}": {"get": {"responses": {"200": {"description": "A PDF report file for frst namespace.", "schema": {"type": "file"}}}, "parameters": [{"description": "Report xml id or report name", "required": true, "type": "string", "name": "report_external_id", "in": "path"}, {"description": "One identifier or several identifiers separated by commas", "required": true, "type": "string", "name": "docids", "in": "path"}], "produces": ["application/pdf"], "description": "Returns PDF report file for frst namespace", "tags": ["report"], "summary": "Get PDF report file for frst namespace", "operationId": "getPdfReportFileForFrstNamespace"}}, "/res.partner/call/{method_name}/{ids}": {"patch": {"responses": {"200": {"description": "successful patch"}, "400": {"$ref": "#/responses/400"}, "401": {"$ref": "#/responses/401"}, "403": {"description": "Requested model method is not allowed", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"$ref": "#/responses/500"}}, "description": "Call model method for recordset.", "parameters": [{"description": "Comma-separated Record IDS", "required": true, "type": "string", "name": "ids", "in": "path"}, {"enum": ["search"], "description": "Method Name", "required": true, "in": "path", "type": "string", "name": "method_name"}, {"description": "Parameters for calling the method on a recordset", "schema": {"$ref": "#/definitions/res.partner-patch"}, "name": "body", "in": "body"}], "produces": ["application/json"], "tags": ["res.partner"], "summary": "Patch res.partner by some IDs", "consumes": ["application/json"], "operationId": "callMethodForResPartnerRecordset"}}, "/res.partner/{id}": {"put": {"responses": {"400": {"$ref": "#/responses/400"}, "401": {"$ref": "#/responses/401"}, "404": {"description": "res.partner not found"}, "500": {"$ref": "#/responses/500"}, "204": {"description": "successful update"}}, "parameters": [{"description": "Record ID", "format": "int64", "required": true, "in": "path", "type": "integer", "name": "id"}, {"schema": {"$ref": "#/definitions/res.partner"}, "description": "Updated res.partner object", "required": true, "name": "body", "in": "body"}], "tags": ["res.partner"], "description": "", "summary": "Update res.partner by ID", "operationId": "updateResPartnerById"}, "delete": {"responses": {"400": {"$ref": "#/responses/400"}, "401": {"$ref": "#/responses/401"}, "404": {"description": "res.partner not found"}, "500": {"$ref": "#/responses/500"}, "204": {"description": "successful delete"}}, "parameters": [{"description": "Record ID", "format": "int64", "required": true, "in": "path", "type": "integer", "name": "id"}], "produces": ["application/json"], "description": "", "tags": ["res.partner"], "summary": "Delete res.partner by ID", "operationId": "deleteResPartner"}, "get": {"responses": {"400": {"$ref": "#/responses/400"}, "200": {"description": "successful operation", "schema": {"$ref": "#/definitions/res.partner-read_one"}}, "404": {"description": "res.partner not found"}, "500": {"$ref": "#/responses/500"}, "401": {"$ref": "#/responses/401"}}, "parameters": [{"description": "Record ID", "format": "int64", "required": true, "in": "path", "type": "integer", "name": "id"}], "produces": ["application/json"], "description": "Returns a single res.partner", "tags": ["res.partner"], "summary": "Get res.partner by ID", "operationId": "getResPartnerById"}}, "/report/html/{report_external_id}/{docids}": {"get": {"responses": {"200": {"description": "A HTML report file for frst namespace.", "schema": {"type": "file"}}}, "parameters": [{"description": "Report xml id or report name", "required": true, "type": "string", "name": "report_external_id", "in": "path"}, {"description": "One identifier or several identifiers separated by commas", "required": true, "type": "string", "name": "docids", "in": "path"}], "produces": ["application/pdf"], "description": "Returns HTML report file for frst namespace", "tags": ["report"], "summary": "Get HTML report file for frst namespace", "operationId": "getHtmlReportFileForFrstNamespace"}}, "/res.partner/call/{method_name}": {"patch": {"responses": {"200": {"description": "successful patch"}, "400": {"$ref": "#/responses/400"}, "401": {"$ref": "#/responses/401"}, "403": {"description": "Requested model method is not allowed", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "500": {"$ref": "#/responses/500"}}, "description": "Call model method on model", "parameters": [{"enum": ["search"], "description": "Method Name", "required": true, "in": "path", "type": "string", "name": "method_name"}, {"description": "Parameters for calling the method on a recordset", "schema": {"$ref": "#/definitions/res.partner-patch"}, "name": "body", "in": "body"}], "produces": ["application/json"], "tags": ["res.partner"], "summary": "Patch res.partner", "consumes": ["application/json"], "operationId": "callMethodForResPartnerModel"}}}, "definitions": {"res.partner-read_one": {"type": "object", "properties": {"lastname": {"type": "string"}, "firstname": {"type": "string"}}}, "res.partner-patch": {"type": "object", "example": {"args": ["Add positional arguments of the called method to 'args'"], "kwargs": {"keyword_argument": "and add keyword arguments to 'kwargs'"}}}, "res.partner-read_many": {"type": "object", "properties": {"lastname": {"type": "string"}, "firstname": {"type": "string"}}}, "ErrorResponse": {"required": ["error", "error_descrip"], "type": "object", "properties": {"error_descrip": {"type": "string"}, "error": {"type": "string"}}}, "res.partner": {"type": "object", "properties": {"lastname": {"type": "string"}, "firstname": {"type": "string"}}}}, "responses": {"500": {"description": "Server Error", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "401": {"description": "Authentication information is missing or invalid", "schema": {"$ref": "#/definitions/ErrorResponse"}}, "400": {"description": "Invalid Data", "schema": {"$ref": "#/definitions/ErrorResponse"}}}, "securityDefinitions": {"basicAuth": {"type": "basic"}}, "security": [{"basicAuth": []}], "tags": [{"name": "res.partner", "description": "Everything about res.partner"}]}
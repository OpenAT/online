.. _res_partner:

==================
res.partner
==================

Records of this model represent a person or a company. This may be a donor, an employee or any other kind
of contact.

.. note::

    Some of the records in this model may stand for special forms of partner data such as
        - **rental addresses**
        - additional partner addresses
            - invoice address
            - delivery address
        - **deleted partners** where some data must be kept for accounting reasons

.. attention::

    Currently the API is not supporting multiple (postal) addresses per partner. But you can set and manipulate the
    *current* or *main address* by setting the corresponding fields of the :ref:`res_partner` record like ``street``,
    ``country_id``, ``zip`` and so on! This feature is therefore only available through the Fundraising Studio GUI
    but may be added later to the REST API.

.. attention::

    Currently the API is not able to set or read the relations between partner! This feature is therefore only
    available through the Fundraising Studio GUI but may be added later to the REST API.

Required Fields
---------------
The minimum requirement for a new contact is the field ``lastname``.

Special Fields
--------------

``name``
""""""""""

The ``name`` field of a partner is a computed field based on the fields ``firstname`` and ``lastname``.
Therefore ``name`` should NEVER be used if ``firstname`` and ``lastname`` are known.

If only ``name`` is given at partner creation the string will be split at the first ``space`` and the first part of the
string will be in ``firstname`` and the rest of the string in ``lastname``. If there is no space in the string the
full string will go into ``lastname``.

.. tip:: ``name`` can be very handy in :ref:`searching` for partners!

.. _res_partner_nob_email:

``email``
""""""""""

A partner in Fundraising Studio can have multiple email addresses stored in :ref:`frst_personemail` and linked to the
partner by the field ``frst_personemail_ids``. These e-mail addresses are created and linked indirectly
by the char field ``email`` of the partner.

If a new email is entered in the field ``email`` of a partner a new
:ref:`frst_personemail` will be created and linked automatically to the partner. The last email entered will be the
so called *current* or *main email address*.

The *main email address* will always match the email found in the :ref:`res_partner` field ``email`` and is linked
for convenience in the :ref:`res_partner` field ``main_personemail_id``

Methods
-------

``search``
""""""""""

Only the ``search`` method is currently exposed by the api. See :ref:`searching` for more information about searching.
